name: Build CMake for Android (All Architectures)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [arm64-v8a, armeabi-v7a, x86_64, x86]

    steps:
    - name: Checkout CMake Source
      uses: actions/checkout@v4
      with:
        repository: Kitware/CMake
        ref: master
        path: CMake

    - name: Setup NDK r29
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r29
        add-to-path: true

    - name: Apply Android Patches
      run: |
        cd CMake
        
        echo "=== Aggressive Android API 21 patching for libuv ==="
        
        # Patch ALL files in libuv to disable CPU affinity on Android API < 28
        find Utilities/cmlibuv/src -name "*.c" -o -name "*.h" | while read file; do
          # Replace all #ifdef __linux__ with Android check
          sed -i 's/#ifdef __linux__/#if defined(__linux__) \&\& (!defined(__ANDROID__) || __ANDROID_API__ >= 28)/g' "$file"
          
          # Replace all #if defined(__linux__) with Android check (if not already patched)
          sed -i 's/#if defined(__linux__)$/#if defined(__linux__) \&\& (!defined(__ANDROID__) || __ANDROID_API__ >= 28)/g' "$file"
        done
        
        echo "=== Creating android_compat.h for pipe2 ==="
        cat > Utilities/cmlibuv/src/unix/android_compat.h << 'EOF'
        #ifndef ANDROID_COMPAT_H
        #define ANDROID_COMPAT_H
        
        #if defined(__ANDROID__)
        #include <unistd.h>
        #include <fcntl.h>
        
        static inline int pipe2(int pipefd[2], int flags) {
          int ret = pipe(pipefd);
          if (ret == 0) {
            if (flags & O_CLOEXEC) {
              fcntl(pipefd[0], F_SETFD, FD_CLOEXEC);
              fcntl(pipefd[1], F_SETFD, FD_CLOEXEC);
            }
            if (flags & O_NONBLOCK) {
              fcntl(pipefd[0], F_SETFL, O_NONBLOCK);
              fcntl(pipefd[1], F_SETFL, O_NONBLOCK);
            }
          }
          return ret;
        }
        #endif
        
        #endif
        EOF
        
        # Add android_compat.h to all unix/*.c files that might use pipe2
        for file in Utilities/cmlibuv/src/unix/*.c; do
          if grep -q "pipe2" "$file"; then
            sed -i '1i #if defined(__ANDROID__)\n#include "android_compat.h"\n#endif\n' "$file"
          fi
        done
        
        echo "=== Creating android_lf.h ==="
        cat > Utilities/cmlibarchive/libarchive/android_lf.h << 'EOF'
        #ifndef ANDROID_LF_H
        #define ANDROID_LF_H
        #include <sys/types.h>
        #include <fcntl.h>
        #include <unistd.h>
        #include <sys/stat.h>
        #if defined(__ANDROID__)
        #ifndef lstat64
        #define lstat64 lstat
        #endif
        #ifndef stat64
        #define stat64 stat
        #endif
        #ifndef fstat64
        #define fstat64 fstat
        #endif
        #ifndef open64
        #define open64 open
        #endif
        #ifndef lseek64
        #define lseek64 lseek
        #endif
        #ifndef off64_t
        #define off64_t off_t
        #endif
        #ifndef ftruncate64
        #define ftruncate64 ftruncate
        #endif
        #endif
        #endif
        EOF
        
        echo "=== Verification ==="
        echo "Files with __linux__ after patching:"
        grep -r "__linux__" Utilities/cmlibuv/src/unix/*.c | head -5
        echo ""
        echo "Files with pipe2:"
        grep -l "pipe2" Utilities/cmlibuv/src/unix/*.c

    - name: Configure Android Build
      run: |
        cd CMake
        
        case "${{ matrix.arch }}" in
          arm64-v8a) CLANG_PREFIX="aarch64-linux-android" ;;
          armeabi-v7a) CLANG_PREFIX="armv7a-linux-androideabi" ;;
          x86_64) CLANG_PREFIX="x86_64-linux-android" ;;
          x86) CLANG_PREFIX="i686-linux-android" ;;
        esac
        
        echo "CLANG_PREFIX=$CLANG_PREFIX" >> $GITHUB_ENV
        
        mkdir -p build-${{ matrix.arch }}
        cd build-${{ matrix.arch }}
        
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=${{ matrix.arch }} \
          -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=MinSizeRel \
          -DCMAKE_C_FLAGS="-Os -ffunction-sections -fdata-sections" \
          -DCMAKE_CXX_FLAGS="-Os -ffunction-sections -fdata-sections -fno-rtti" \
          -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -Wl,-z,max-page-size=16384" \
          -DBUILD_TESTING=OFF \
          -DBUILD_QtDialog=OFF

    - name: Build
      run: |
        cd CMake/build-${{ matrix.arch }}
        make -j$(nproc)

    - name: Create Shared Library
      run: |
        cd CMake/build-${{ matrix.arch }}
        $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ env.CLANG_PREFIX }}21-clang++ \
          -shared -o libcmake.so \
          -Wl,--whole-archive lib/libCMakeLib.a -Wl,--no-whole-archive \
          -Os -Wl,--gc-sections -Wl,--strip-all -Wl,-z,max-page-size=16384 \
          -fPIC -ldl -llog -latomic
        
        $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip --strip-unneeded libcmake.so
        
        echo "âœ“ ${{ matrix.arch }}: $(ls -lh libcmake.so | awk '{print $5}')"

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: cmake-${{ matrix.arch }}
        path: CMake/build-${{ matrix.arch }}/libcmake.so
        retention-days: 30
