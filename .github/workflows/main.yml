name: Build CMake for Android (All Architectures)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [arm64-v8a, armeabi-v7a, x86_64, x86]

    steps:
    - name: Checkout CMake Source
      uses: actions/checkout@v4
      with:
        repository: Kitware/CMake
        ref: master
        path: CMake

    - name: Setup NDK r29
      uses: nttld/setup-ndk@v1
      with:
        ndk-version: r29
        add-to-path: true

    - name: Apply Android Patches
      run: |
        cd CMake
        
        echo "=== Creating comprehensive Android compat header ==="
        cat > Utilities/cmlibuv/src/unix/android_compat.h << 'EOF'
        #ifndef ANDROID_COMPAT_H
        #define ANDROID_COMPAT_H
        
        #if defined(__ANDROID__)
        #include <unistd.h>
        #include <fcntl.h>
        
        /* pipe2 fallback */
        #ifndef pipe2
        static inline int pipe2(int pipefd[2], int flags) {
          int ret = pipe(pipefd);
          if (ret == 0) {
            if (flags & O_CLOEXEC) {
              fcntl(pipefd[0], F_SETFD, FD_CLOEXEC);
              fcntl(pipefd[1], F_SETFD, FD_CLOEXEC);
            }
            if (flags & O_NONBLOCK) {
              fcntl(pipefd[0], F_SETFL, O_NONBLOCK);
              fcntl(pipefd[1], F_SETFL, O_NONBLOCK);
            }
          }
          return ret;
        }
        #endif
        
        /* Disable CPU affinity on Android API < 28 */
        #if __ANDROID_API__ < 28
        #define UV_DISABLE_CPU_AFFINITY 1
        #endif
        
        #endif /* __ANDROID__ */
        #endif /* ANDROID_COMPAT_H */
        EOF
        
        echo "=== Patching core.c - disable CPU_SETSIZE on old Android ==="
        cat > /tmp/core_patch.txt << 'EOF'
        --- a/Utilities/cmlibuv/src/unix/core.c
        +++ b/Utilities/cmlibuv/src/unix/core.c
        @@ -21,6 +21,10 @@
         #include "uv.h"
         #include "internal.h"
         
        +#if defined(__ANDROID__)
        +#include "android_compat.h"
        +#endif
        +
         #include <stddef.h> /* NULL */
         #include <stdio.h> /* printf */
         #include <stdlib.h>
        @@ -1408,7 +1412,7 @@ int uv_os_unsetenv(const char* name) {
         
         
         int uv_cpumask_size(void) {
        -#if defined(__linux__) || defined(__FreeBSD__)
        +#if (defined(__linux__) && (!defined(__ANDROID__) || __ANDROID_API__ >= 28)) || defined(__FreeBSD__)
           return CPU_SETSIZE;
         #else
           return UV_ENOTSUP;
        @@ -1644,7 +1648,7 @@ int uv__search_path(const char* prog, char* buf, size_t* buflen) {
         
         
         unsigned int uv_available_parallelism(void) {
        -#ifdef __linux__
        +#if defined(__linux__) && (!defined(__ANDROID__) || __ANDROID_API__ >= 28)
           cpu_set_t set;
           long rc;
         
        EOF
        
        # Apply manual patches to core.c
        sed -i '22i #if defined(__ANDROID__)\n#include "android_compat.h"\n#endif' Utilities/cmlibuv/src/unix/core.c
        sed -i 's/^int uv_cpumask_size(void) {$/int uv_cpumask_size(void) {\n#if (defined(__linux__) \&\& (!defined(__ANDROID__) || __ANDROID_API__ >= 28)) || defined(__FreeBSD__)/' Utilities/cmlibuv/src/unix/core.c
        sed -i '/^int uv_cpumask_size/,/^}$/ { s/^#if defined(__linux__) || defined(__FreeBSD__)$/  return CPU_SETSIZE;\n#else/; }' Utilities/cmlibuv/src/unix/core.c
        
        # Simpler approach - just replace the specific lines
        sed -i '1411s/^#if defined(__linux__) || defined(__FreeBSD__)$/#if (defined(__linux__) \&\& (!defined(__ANDROID__) || __ANDROID_API__ >= 28)) || defined(__FreeBSD__)/' Utilities/cmlibuv/src/unix/core.c
        sed -i '1648s/^#ifdef __linux__$/#if defined(__linux__) \&\& (!defined(__ANDROID__) || __ANDROID_API__ >= 28)/' Utilities/cmlibuv/src/unix/core.c
        
        echo "=== Patching process.c - disable CPU affinity on old Android ==="
        sed -i '1i #if defined(__ANDROID__)\n#include "android_compat.h"\n#endif' Utilities/cmlibuv/src/unix/process.c
        
        # Wrap the CPU affinity section in process.c
        sed -i '/uv__cpu_set_t cpuset;/,/pthread_setaffinity_np/ {
          s/^#ifdef __linux__$/#if defined(__linux__) \&\& (!defined(__ANDROID__) || __ANDROID_API__ >= 28)/
        }' Utilities/cmlibuv/src/unix/process.c
        
        echo "=== Patching pipe.c ==="
        sed -i '1i #if defined(__ANDROID__)\n#include "android_compat.h"\n#endif' Utilities/cmlibuv/src/unix/pipe.c
        
        echo "=== Creating android_lf.h ==="
        cat > Utilities/cmlibarchive/libarchive/android_lf.h << 'EOF'
        #ifndef ANDROID_LF_H
        #define ANDROID_LF_H
        #include <sys/types.h>
        #include <fcntl.h>
        #include <unistd.h>
        #include <sys/stat.h>
        #if defined(__ANDROID__)
        #ifndef lstat64
        #define lstat64 lstat
        #endif
        #ifndef stat64
        #define stat64 stat
        #endif
        #ifndef fstat64
        #define fstat64 fstat
        #endif
        #ifndef open64
        #define open64 open
        #endif
        #ifndef lseek64
        #define lseek64 lseek
        #endif
        #ifndef off64_t
        #define off64_t off_t
        #endif
        #ifndef ftruncate64
        #define ftruncate64 ftruncate
        #endif
        #endif
        #endif
        EOF

    - name: Configure Android Build
      run: |
        cd CMake
        
        case "${{ matrix.arch }}" in
          arm64-v8a) CLANG_PREFIX="aarch64-linux-android" ;;
          armeabi-v7a) CLANG_PREFIX="armv7a-linux-androideabi" ;;
          x86_64) CLANG_PREFIX="x86_64-linux-android" ;;
          x86) CLANG_PREFIX="i686-linux-android" ;;
        esac
        
        echo "CLANG_PREFIX=$CLANG_PREFIX" >> $GITHUB_ENV
        
        mkdir -p build-${{ matrix.arch }}
        cd build-${{ matrix.arch }}
        
        cmake .. \
          -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=${{ matrix.arch }} \
          -DANDROID_PLATFORM=android-21 \
          -DCMAKE_BUILD_TYPE=MinSizeRel \
          -DCMAKE_C_FLAGS="-Os -ffunction-sections -fdata-sections" \
          -DCMAKE_CXX_FLAGS="-Os -ffunction-sections -fdata-sections -fno-rtti" \
          -DCMAKE_SHARED_LINKER_FLAGS="-Wl,--gc-sections -Wl,--strip-all -Wl,-z,max-page-size=16384" \
          -DBUILD_TESTING=OFF \
          -DBUILD_QtDialog=OFF

    - name: Build
      run: |
        cd CMake/build-${{ matrix.arch }}
        make -j$(nproc)

    - name: Create Shared Library
      run: |
        cd CMake/build-${{ matrix.arch }}
        $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/${{ env.CLANG_PREFIX }}21-clang++ \
          -shared -o libcmake.so \
          -Wl,--whole-archive lib/libCMakeLib.a -Wl,--no-whole-archive \
          -Os -Wl,--gc-sections -Wl,--strip-all -Wl,-z,max-page-size=16384 \
          -fPIC -ldl -llog -latomic
        
        $ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-strip --strip-unneeded libcmake.so
        
        ls -lh libcmake.so

    - name: Upload
      uses: actions/upload-artifact@v4
      with:
        name: cmake-${{ matrix.arch }}
        path: CMake/build-${{ matrix.arch }}/libcmake.so
        retention-days: 30
